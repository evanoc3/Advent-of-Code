{
	"Solution Header": {
		"scope": "cpp",
		"prefix": "solution-header",
		"body": [
			"#pragma once",
			"",
			"#include \"utils/ISolution.hpp\"",
			"",
			"",
			"namespace Year2022::Day${1:DayNum} {",
			"\t",
			"\tusing Input = ${2:Input_t};",
			"\t",
			"\t",
			"\tclass Solution final : public IGetInput<const Input>",
			"\t\t\t\t\t\t\t\t\t\t\t //, public ISolutionWithInput<const Input&, ${3:Part1_t}, Part2_t> {",
			"\t\t\t\t\t\t\t\t\t\t\t , public IPart1WithInput<const Input&, $3> {",
			"\tpublic:",
			"\t\t~Solution() = default;",
			"\t\t",
			"\t\tconst Input getInput() const override;",
			"\t\tconst $3 part1(const Input& input) const override;",
			"\t\t//const auto part2(const Input& input) const override;",
			"\t\t",
			"\t};",
			"\t",
			"}",
			""
		],
		"description": "Template for the header file of solution classes"
	},

	"Solution Implementation": {
		"scope": "cpp",
		"prefix": "solution-implementation",
		"body": [
			"#include <filesystem>",
			"#include <fstream>",
			"#include \"solution.hpp\"",
			"",
			"",
			"using namespace Year2022::Day${1:DayNum};",
			"",
			"",
			"const Input Solution::getInput() const {",
			"\tauto inputFilePath = std::filesystem::path(__FILE__);",
			"\tinputFilePath.replace_filename(\"input.txt\");",
			"",
			"\tstd::ifstream inputFile;",
			"\tinputFile.open(inputFilePath, std::ios::in);",
			"",
			"\tInput input;",
			"",
			"\tif(!inputFile.is_open()) {",
			"\t\treturn input;",
			"\t}",
			"",
			"\tstd::string line;",
			"\twhile(getline(inputFile, line)) {",
			"\t\t// do something to parse the input here",
			"\t}",
			"",
			"\tinputFile.close();",
			"\treturn input;",
			"}",
			"",
			"",
			"const ${2:Part1_t} Solution::part1(const Input& input) const {",
			"}",
			"",
			"",
			"//const ${3:Part2_t} Solution::part2(const Input& input) const {",
			"//}",
			""
		],
		"description": "Implementation of a solution class"
	},

	"Solution Test Case": {
		"scope": "cpp",
		"prefix": "solution-testcase",
		"body": [
			"#include <catch.hpp>",
			"#include \"solution.hpp\"",
			"",
			"",
			"using namespace Year2022::Day${1:DayNum};",
			"",
			"",
			"namespace Year2022::Day$1 {",
			"",
			"\tclass SolutionTests {",
			"\tpublic:",
			"\t\tSolutionTests()",
			"\t\t\t: solution(std::make_unique<Solution>()) {",
			"\t\t}",
			"\t\t",
			"\t\tstd::unique_ptr<Solution> solution;",
			"\t};",
			"",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::getInput\", \"[Year2022][Day$1]\")",
			"{",
			"\tconst auto actualInput = solution->getInput();",
			"\t",
			"\t// do some assertions on the input here",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::part1\", \"[Year2022][Day$1]\")",
			"{",
			"\tGIVEN(\"Sample input\")",
			"\t{",
			"\t\tconst Input sampleInput = {",
			"\t\t\t/* insert the sample input from the problem here */",
			"\t\t};",
			"\t",
			"\t\t// do some assertions on the output of part1 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part1(sampleInput) == expectedOutput );",
			"\t}",
			"\t",
			"\tGIVEN(\"Real input\")",
			"\t{",
			"\t\t// do some assertions on the output of part1 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part1(solution->getInput()) == expectedOutput );",
			"\t}",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::part2\", \"[Year2022][Day$1]\")",
			"{",
			"\tGIVEN(\"Sample input\")",
			"\t{",
			"\t\tconst Input sampleInput = {",
			"\t\t\t/* insert the sample input from the problem here */",
			"\t\t};",
			"\t\t",
			"\t\t// do some assertions on the output of part2 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part1(sampleInput) == expectedOutput );",
			"\t}",
			"\t",
			"\tGIVEN(\"Real input\")",
			"\t{",
			"\t\t// do some assertions on the output of part2 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part2(solution->getInput()) == expectedOutput );",
			"\t}",
			"}",
			""
		],
		"description": "Catch2 test case for solution classes"
	},

	"Print Solution Output": {
		"scope": "cpp",
		"prefix": "solution-main",
		"body": [
			"// year 2022 day ${1:DayNum}",
			"{",
			"\tconst auto solution = std::make_unique<Year2022::Day$1::Solution>();",
			"\tconst auto input = solution->getInput();",
			"\tstd::cout << \"Year2022::Day$1::Solution->part1(): \" << solution->part1(input) << std::endl;",
			"\t//std::cout << \"Year2022::Day$1::Solution->part2(): \" << solution->part2(input) << std::endl;",
			"\tstd::cout << std::endl;",
			"}"
		]
	}
}
