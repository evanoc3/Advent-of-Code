{
	// Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Solution Header": {
		"scope": "cpp",
		"prefix": "header",
		"body": [
			"#pragma once",
			"",
			"#include \"utils/ISolution.hpp\"",
			"",
			"",
			"namespace Year2022::Day${1:Num} {",
			"",
			"\tusing Input = ${2:InType};",
			"",
			"",
			"\tclass Solution final : public IGetInput<Input>",
			"\t\t\t\t\t\t\t\t\t\t\t , public IPart1<Input, ${3:OutType}> {",
			"\tpublic:",
			"\t\t~Solution() = default;",
			"",
			"\t\tconst Input getInput() const override;",
			"\t\tconst $3 part1(const Input input) const override;",
			"",
			"\tprivate:",
			"\t};",
			"",
			"}",
			""
		],
		"description": "Template for the header file of solution classes"
	},

	"Solution Implementation": {
		"scope": "cpp",
		"prefix": "implementation",
		"body": [
			"#include <filesystem>",
			"#include <fstream>",
			"#include \"solution.hpp\"",
			"",
			"",
			"using namespace Year2022::Day${1:DayNum};",
			"",
			"",
			"const Input Solution::getInput() const {",
			"\tauto inputFilePath = std::filesystem::path(__FILE__);",
			"\tinputFilePath.replace_filename(\"input.txt\");",
			"",
			"\tstd::ifstream inputFile;",
			"\tinputFile.open(inputFilePath, std::ios::in);",
			"",
			"\tInput input;",
			"",
			"\tif(!inputFile.is_open()) {",
			"\t\treturn input;",
			"\t}",
			"",
			"\tstd::string line;",
			"\twhile(getline(inputFile, line)) {",
			"\t\t// do something to parse the input here",
			"\t}",
			"",
			"\tinputFile.close();",
			"\treturn input;",
			"}",
			"",
			"",
			"const ${2:OutType} Solution::part1(const Input input) const {",
			"}"
		],
		"description": "Implementation of a solution class"
	},

	"Solution Test Case": {
		"scope": "cpp",
		"prefix": "testcase",
		"body": [
			"#include <catch.hpp>",
			"#include \"solution.hpp\"",
			"",
			"",
			"using namespace Year2022::Day${1:DayNum};",
			"",
			"",
			"namespace Year2022::Day$1 {",
			"",
			"\tclass SolutionTests {",
			"\tpublic:",
			"\t\tSolutionTests()",
			"\t\t\t: solution(std::make_unique<Solution>()) {",
			"\t\t}",
			"\t\t",
			"\t\tstd::unique_ptr<Solution> solution;",
			"\t};",
			"",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::getInput\", \"[Year2022][Day$1]\")",
			"{",
			"\tconst auto actualInput = solution->getInput();",
			"\t",
			"\t// do some assertions on the input here",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::part1\", \"[Year2022][Day$1]\")",
			"{",
			"\tGIVEN(\"Sample input\")",
			"\t{",
			"\t\tconst Input sampleInput = {",
			"\t\t\t/* insert the sample input from the problem here */",
			"\t\t};",
			"\t",
			"\t\t// do some assertions on the output of part1 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part1(sampleInput) == expectedOutput );",
			"\t}",
			"\t",
			"\tGIVEN(\"Real input\")",
			"\t{",
			"\t\t// do some assertions on the output of part1 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part1(solution->getInput()) == expectedOutput );",
			"\t}",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::part2\", \"[Year2022][Day$1]\")",
			"{",
			"\tGIVEN(\"Sample input\")",
			"\t{",
			"\t\tconst Input sampleInput = {",
			"\t\t\t/* insert the sample input from the problem here */",
			"\t\t};",
			"\t\t",
			"\t\t// do some assertions on the output of part2 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part1(sampleInput) == expectedOutput );",
			"\t}",
			"\t",
			"\tGIVEN(\"Real input\")",
			"\t{",
			"\t\t// do some assertions on the output of part2 here",
			"\t\t// const auto expectedOutput = /* insert the expected output here */;",
			"\t\t// REQUIRE( solution->part2(solution->getInput()) == expectedOutput );",
			"\t}",
			"}",
			""
		],
		"description": "Catch2 test case for solution classes"
	},

	"Print Solution Output": {
		"scope": "cpp",
		"prefix": "printsolution",
		"body": [
			"// year 2022 day ${1:DayNum}",
			"{",
			"\tconst auto solution = std::make_unique<Year2022::Day$1::Solution>();",
			"\tconst auto input = solution->getInput();",
			"\tstd::cout << \"Year2022::Day$1::Solution->part1(): \" << solution->part1(input) << std::endl;",
			"\t// std::cout << \"Year2022::Day$1::Solution->part2(): \" << solution->part2(input) << std::endl;",
			"\tstd::cout << std::endl;",
			"}"
		]
	}
}
